{"version":3,"sources":["components/List/index.js","components/Container/index.js","components/SearchBar/index.js","App.js","serviceWorker.js","index.js"],"names":["List","props","employee","employees","Table","striped","bordered","hover","variant","onClick","handleSortSelect","map","item","key","id","Image","alt","name","src","image","roundedCircle","fluid","occupation","location","Wrapper","Container","children","SearchBar","Navbar","bg","Brand","Form","inline","FormControl","type","placeholder","className","onChange","handleInputChange","value","Button","handleFormSubmit","App","state","search","searchName","query","arrEmployees","find","res","console","log","setState","alert","sort","a","b","nameA","toLowerCase","nameB","event","target","preventDefault","textContent","this","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e5d8b373.chunk.js","sourcesContent":["import React from \"react\";\nimport { Table, Image } from 'react-bootstrap'\nimport \"./style.css\";\n\nfunction List(props) {\n\n  const employee = props.employees\n\n  return (\n    <Table striped bordered hover variant=\"dark\">\n      <thead>\n        <tr>\n          <th>Profile Pic</th>\n          <th\n            onClick={props.handleSortSelect}\n          >Name</th>\n          <th\n            onClick={props.handleSortSelect}\n          >Role</th>\n          <th\n            onClick={props.handleSortSelect}\n          >Work Location</th>\n        </tr>\n      </thead>\n      <tbody>\n        {employee.map(item => (\n          <tr key={item.id}>\n            <td><Image alt={item.name} src={item.image} roundedCircle fluid /></td>\n            <td>{item.name}</td>\n            <td>{item.occupation}</td>\n            <td>{item.location}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n\n  );\n}\n\nexport default List;","import React from \"react\";\nimport { Container } from 'react-bootstrap'\n\nfunction Wrapper(props) {\n    return (\n        <Container fluid>\n            {props.children}\n        </Container>\n\n    );\n}\n\nexport default Wrapper;","import React from \"react\";\nimport { Navbar, Form, Button, FormControl } from 'react-bootstrap'\nimport \"./style.css\";\n\nfunction SearchBar(props) {\n    return (\n        <Navbar bg=\"light\" variant=\"light\">\n            <Navbar.Brand >My Employee Search/Sort Tools (Click on Name, Role and Work Location to sort)</Navbar.Brand>\n            <Form inline>\n                <FormControl\n                    type=\"text\"\n                    placeholder=\"Name\"\n                    className=\"mr-sm-2\"\n                    onChange={props.handleInputChange}\n                    value={props.value}\n                    name=\"search\" />\n                <Button \n                variant=\"outline-primary\" \n                onClick={props.handleFormSubmit}>Search</Button>\n            </Form>\n        </Navbar>\n\n    );\n}\n\nexport default SearchBar;\n\n// {/* <form>\n//     <div className=\"form-group\">\n//         <label htmlFor=\"search\">Search:</label>\n//         <input\n//             onChange={props.handleInputChange}\n//             value={props.value}\n//             name=\"search\"\n//             type=\"text\"\n//             className=\"form-control\"\n//             placeholder=\"Search For a Movie\"\n//             id=\"search\"\n//         />\n//         <br />\n//         <button onClick={props.handleFormSubmit} className=\"btn btn-primary\">\n//             Search\n//   </button>\n//     </div>\n// </form> */}","import React, { Component } from \"react\";\nimport List from './components/List'\nimport Wrapper from './components/Container'\nimport SearchBar from './components/SearchBar'\nimport employees from './utils/employees.json'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    employees: employees,\n    search: ''\n  }\n\n  searchName = query => {\n    let arrEmployees = this.state.employees;\n    arrEmployees = arrEmployees.find(res => res.name === query);\n    console.log(arrEmployees);\n    if (!arrEmployees) {\n      this.setState({search: \"\"})\n      this.setState({ employees: employees });\n      console.log(employees)\n      console.log(\"No search\")\n      alert(\"No Match\");\n      return;\n    } else {\n      this.setState({ employees: [arrEmployees] });\n    }\n  };\n\n  sort = query => {\n    let arrEmployees = this.state.employees;\n    console.log(\"Sorting\");\n    console.log(query);\n    if (query === \"Work Location\") {\n      arrEmployees = arrEmployees.sort(function (a, b) {\n        console.log(\"in sort query1\");\n        let nameA = a.location.toLowerCase(), nameB = b.location.toLowerCase();\n        if (nameA < nameB) //sort string ascending\n          return -1\n        if (nameA > nameB)\n          return 1\n        return 0\n      });\n      console.log(\"in sort query2\");\n      console.log(arrEmployees);\n      this.setState({ employees: arrEmployees});\n    } \n    \n    if (query === \"Role\") {\n      arrEmployees = arrEmployees.sort(function (a, b) {\n        console.log(\"in sort query1\")\n        let nameA = a.occupation.toLowerCase(), nameB = b.occupation.toLowerCase()\n        if (nameA < nameB) //sort string ascending\n          return -1\n        if (nameA > nameB)\n          return 1\n        return 0\n      })\n\n      console.log(\"in sort query3\")\n      console.log(arrEmployees)\n      this.setState({ employees: arrEmployees})\n    }\n\n    if (query === \"Name\") {\n      arrEmployees = arrEmployees.sort(function (a, b) {\n        console.log(\"in sort query1\")\n        let nameA = a.name.toLowerCase(), nameB = b.name.toLowerCase()\n        if (nameA < nameB) //sort string ascending\n          return -1\n        if (nameA > nameB)\n          return 1\n        return 0\n      })\n\n      console.log(\"in sort query3\")\n      console.log(arrEmployees)\n      this.setState({ employees: arrEmployees})\n    }\n  }\n\n  handleInputChange = event => {\n    const value = event.target.value;\n    const name = event.target.name;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleSortSelect = event => {\n    event.preventDefault();\n    console.log(\"Clicked\")\n\n    const value = event.target.textContent;\n    console.log(value)\n    this.sort(value);\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    this.searchName(this.state.search);\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <SearchBar value={this.state.search}\n          handleInputChange={this.handleInputChange}\n          handleFormSubmit={this.handleFormSubmit} />\n        <List employees={this.state.employees} handleSortSelect={this.handleSortSelect} />\n      </Wrapper>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}